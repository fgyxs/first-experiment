#include <stdio.h>#include <stdlib.h>#include <time.h>#include <mpi.h>#include <iostream>using namespace std;int main(int argc, char** argv) {	int N = 100000000;	int a = 10;	int b = 100;	int myid, numprocs;	int i;	double local = 0.0, dx = (double)(b - a) / N;	double inte, x;	double d = 0;	double m = 0;	double result = 0;	MPI_Status status;	clock_t t;	t = clock();	MPI_Init(&argc, &argv);	MPI_Comm_rank(MPI_COMM_WORLD, &myid);	MPI_Comm_size(MPI_COMM_WORLD, &numprocs);	if (myid == 0) {		for (int source = 1; source < numprocs; ++source)		{			MPI_Recv(&m, 1, MPI_DOUBLE, source, 99, MPI_COMM_WORLD, &status);			result += m;		}		cout << "I am process " << myid << " the result is " << result << endl;		t = clock() - t;		cout << "use " << t << " time " << endl;	}	else	{		for (i = myid - 1; i < N; i = i + numprocs - 1)		{			x = a + i * dx + dx / 2;			local += x * x * x * dx;		}		MPI_Send(&local, 1, MPI_DOUBLE, 0, 99, MPI_COMM_WORLD);		cout << "I am process " << myid << " I will send " << local << "back" << endl;	}	MPI_Finalize();}